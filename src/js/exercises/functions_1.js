/*
Функции в JavaScript. Классический способ создания https://itchief.ru/javascript/functions

Вопросы--------------------------------------------------------------------:
    1. Описать процесс создвния функции посредством Function Declaration.
    2. Что такое параметры и аргументы функции?
    3. Какие ты знаешь встроенные функции JS?
    4. Что такое область видимости? Какая область видимости для локальных переменных функции?
    5. Что такое callback?
    6. Что означает ключевое слово return внутри фннкции, что будет если его не определить в фунуции? 
    7. Что такое рукурсия?
    8. Что нужно предусмотреть при создании рекурсии?
    9. Как задать значение парамента функции по умолчанию и для чего это нужно?
    10. Что такое Оставшиеся параметры (rest parameters)?
*/

//Задания--------------------------------------------------------------------:

/*
1. Написань функцию Которая принимает 2 аргумента и выводит в консоль строку по шаблону:

    <name> says - "Hello Snape!"
    Snape answered - "<answer>"

(шаблон написан на метаязыке бэкуса-наура - загугли если не знаешь)
(специальный символ переноса строки - \n)
*/

makeDialog("Harry", "Get out!");

/*
2. Написать функцию Которая 
считает сумму всех аргументов - чисел
складывает все аргументы типа - сторока и разделает запятыми

//! не испозьзовать тип цикла for (let i = 0, length = arguments.length; i < length; i++) 

Результаты вывести в консоль
*/

concatValues(1,3,8, null, "Apple", 100, "Pie", 234.2, undefined, "Cake");
concatValues(1,5б 10);
concatValues("Apple", "Juice");
concatValues(null);

/*
3. Написать функцию loadFile которая имитирует загрузку некого файла
При начале закгрузки вывести в консоль - Loading file...
Через 2 секунды выводит в консоль результат загрузкис помощью коллбека 
*/

function logResult (result, error) {
    if (error) {
        console.error("Error of loading!");
    } else {
        console.log("result = ", result);
    }
}

loadFile("script.js", logResult)
loadFile(12345, logResult)
loadFile(undefined, logResult)

/*
4. Написать функцию-калькулятор которая возвращает результат операции 2 чисел указанной в 1 аргументе
    Если операцию невозможно произвести, то вернуть ошибку - "Error of operation!"
    Примеры:
    const result = calculate("multiply", 6, 6)
    console.log(result) // 12

    const result = calculate("multiply", 6)
    console.log(result) // 6

    const result = calculate("diff", 6, 5)
    console.log(result) // 1

    const result = calculate("summ")
    console.log(result) // Error of operation!

    const result = calculate("summ", 1, 2)
    console.log(result) // 3

    const result = calculate("division", 2, 2)
    console.log(result) // 1

    const result = calculate("division", 2, 0)
    console.log(result) // Error of operation!

    ... и так далее
*/

/* 
5. Написать функцию которая выводит последовательно в консоль 
Имя того кто взял яблоко и сколько яблок осталось 
Первая берет яблоко - Катя
Потом берет яюлоко - Петя
Потом опять Катя 
и так до тех пор пока не закончатся яблоки

Когда вся яблоки закончатся вывести в консоль - "Все яблоки закончились"
    Использовать рекурсию
    Не использовать циклы
    Имена могут быть другие

    Пример вывода в консоль:
    Катя взяла яблоко, осталось 10 
    Петя взял яблоко, осталось 9 
    Катя взяла яблоко, осталось 8
    Петя взял яблоко, осталось 7
    ...
    Все яблоки закончились

*/

/* 
6. Написать функцию reverseNumbers которая возвращает строку с числами в обратном порядке через запятую
*/

const result = reverseNumbers(1)(2)(3);
console.log(result) // Вернет - 3,2,1

/* 
7. Написать функцию drawMatrix которая выведет в консоль матрицу определенной размерности
и заполнит ее элементами 0 и элементами x по дигонали
    размерность может быть любая в зависимости от введенного аргумента
*/

const matrix = drawMatrix(3)
console.log(matrix) 
// Выведет в консоль - 
/* 
    x,0,0
    0,x,0
    0,0,x
*/

